size=.3) +                        # Thinner lines
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
geom_line() +                        # Thinner lines
q
ggplot(data=x, aes_string(x='timestampHour', y='volume', fill='dayOfWeek')) +
geom_line() +                        # Thinner lines
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', fill='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed")     # Set title
ggplot(data=x, aes_string(x='timestampHour', y='volume', group='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed")     # Set title
ggplot(data=x, aes_string(x='timestampHour', y='volume', fill='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', group='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', fill='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', group='dayOfWeek', shape='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
#scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', group='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
#scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
ggplot(data=x, aes_string(x='timestampHour', y='volume', group='dayOfWeek', colour='dayOfWeek')) +
geom_line() +                        # Thinner lines
geom_point() +
#scale_fill_hue(name="weather condition") +      # Set legend title
xlab("Time of day") + ylab("average speed") + # Set axis labels
ggtitle("average speed") +     # Set title
theme_bw()
library(mypackage)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
library(mypackage)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(mypackage)
opencpu$start(12345)
x <- read.csv(url('http://localhost:12345/ocpu/tmp/x0a6a03f49a/R/.val/csv'))
filter <- function(dataset, criteria = NULL) {
criteria <- strsplit(criteria, ';')[[1]]
result  <- dplyr::filter_(dataset, criteria)
return(result)
}
y <- filter(x, "Direction.Name == 'East';weekOfYear == '01'")
filter <- function(dataset, criteria = NULL) {
criteria <- strsplit(criteria, ';')[[1]]
result  <- dplyr::filter_(dataset, .dots = criteria)
return(result)
}
y <- filter(x, "Direction.Name == 'East';weekOfYear == '01'")
y <- filter(x, "Direction.Name == 'East';weekOfYear == '01'")
y <- filter(x, "Direction.Name == 'East' & weekOfYear == '01'")
filter <- function(dataset, criteria = NULL) {
criteria <- strsplit(criteria, ';')[[1]]
result  <- dplyr::filter_(dataset, criteria)
return(result)
}
y <- filter(x, "Direction.Name == 'East' & weekOfYear == '01'")
y <- filter(x, "Direction.Name == 'East'")
y <- filter(x, "Direction.Name == 'East' & weekOfYear == '01'")
y <- filter(x, "weekOfYear == '01'")
y <- filter(x, "Direction.Name == 'East'")
y <- filter(x, " weekOfYear == '01'")
y <- filter(x, "Direction.Name == 'East' & weekOfYear == '01'")
View(x)
y <- filter(x, "Direction.Name == 'East' & weekOfYear == 1")
y <- filter(x, "Direction.Name == 'East'; weekOfYear == 1")
y <- filter(x, "Direction.Name == 'East' & weekOfYear == 1")
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
# Read inlifecare_1 document
dir <- "~Kalyani/campaign1/"
filename = "inlifecare_1.csv"
verba= read.csv(paste0(dir, filename, sep = ""), stringsAsFactors = FALSE)
# Read inlifecare_1 document
dir <- "~/Documents/Kalyani/campaign1/"
filename = "inlifecare_1.csv"
verba= read.csv(paste0(dir, filename, sep = ""), stringsAsFactors = FALSE)
nrow(verba)
names(verba)
verba1<-verba$verbatim
verba1
verba1 <- gsub("[^[:alnum:]///' ]", "",verba1)
library(tm)
myCorpus <- Corpus(VectorSource(verba1))
myCorpusDF<-data.frame(text=unlist(sapply(myCorpus, `[`, "content")), stringsAsFactors=F)
myCorpusDF[1:5,]
install.packages('tm')
library(tm)
library(tm)
myCorpus <- Corpus(VectorSource(verba1))
myCorpusDF<-data.frame(text=unlist(sapply(myCorpus, `[`, "content")), stringsAsFactors=F)
myCorpusDF[1:5,]
corpus_clean <- tm_map(myCorpus, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpusDF<-data.frame(text=unlist(sapply(corpus_clean, `[`, "content")), stringsAsFactors=F)
corpusDF[1:5,]
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
wordcloud(corpus_clean, min.freq = 40, random.order = FALSE, colors=brewer.pal(8, "Dark2"))
dtm <- DocumentTermMatrix(corpus_clean)
inspect(dtm[1:5, 1:10])
findFreqTerms(dtm, 200)
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
rowSums(dtm, na.rm = TRUE)
rowSums(dtm, na.rm = TRUE)
library("slam", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:slam", unload=TRUE)
# Read inlifecare_1 document
dir <- "~/Documents/Kalyani/campaign1/"
filename = "inlifecare_1.csv"
verba= read.csv(paste0(dir, filename, sep = ""), stringsAsFactors = FALSE)
nrow(verba)
names(verba)
# remove the non-text characters
verba1<-verba$verbatim
verba1
verba1 <- gsub("[^[:alnum:]///' ]", "",verba1)
# build a corpus, which is a collection of text documents
# VectorSource specifies that the source is character vectors.
install.packages('tm')
library(tm)
myCorpus <- Corpus(VectorSource(verba1))
myCorpusDF<-data.frame(text=unlist(sapply(myCorpus, `[`, "content")), stringsAsFactors=F)
myCorpusDF[1:5,]
# clean up the corpus using tm_map()
corpus_clean <- tm_map(myCorpus, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
# examine the clean corpus
corpusDF<-data.frame(text=unlist(sapply(corpus_clean, `[`, "content")), stringsAsFactors=F)
corpusDF[1:5,]
dtm <- DocumentTermMatrix(corpus_clean)
inspect(dtm[1:5, 1:10])
findFreqTerms(dtm, 200)
dtm_matrix <- matrix(unlist(dtm$j), ncol = dtm$ncol, row.names = dtm$Docs, col.names = dtm$Terms)
dtm_matrix <- as.data.frame(unlist(dtm$j), ncol = dtm$ncol, row.names = dtm$Docs, col.names = dtm$Terms)
View(dtm_matrix)
dtm_matrix <- data.frame(matrix(unlist(dtm$j), ncol = dtm$ncol, row.names = dtm$Docs, col.names = dtm$Terms))
dtm_matrix <- data.frame(matrix(unlist(dtm$j), ncol = dtm$ncol), row.names = dtm$Docs, col.names = dtm$Terms)
dtm_matrix <- data.frame(matrix(unlist(dtm$j), ncol = dtm$ncol, nrow = dtm$nrow), row.names = dtm$Docs, col.names = dtm$Terms)
rowTotals <- sapply(dtm, 1, sum)
rowTotals <- apply(dtm, 1, sum)
dtm$j
as.data.frame(dtm)
dir <- "~/Documents/Kalyani/campaign2/"
inlife.jan <- "inlife_jan.csv"
inlife.feb <- "inlife_feb.csv"
inlife.mar <- "inlife_mar.csv"
inlife.apr <- "inlife_apr.csv"
inlife.may <- "inlife_may.csv"
commentsjan= read.csv(paste0(dir, inlife.jan, sep = ""), stringsAsFactors = FALSE)
nrow(commentsjan)
names(commentsjan)
commentsfeb=read.csv(paste0(dir, inlife.feb, sep = ""), stringsAsFactors = FALSE)
commentsmar=read.csv(paste0(dir, inlife.mar, sep = ""), stringsAsFactors = FALSE)
commentsapr=read.csv(paste0(dir, inlife.apr, sep = ""), stringsAsFactors = FALSE)
commentsmay=read.csv(paste0(dir, inlife.may, sep = ""), stringsAsFactors = FALSE)
install.packages("SnowballC")
library("tm")
library("SnowballC")
#creating a block to extract only call comments in the document.
#removing non text characters
commentsjan1=commentsjan$callcomments
commentsjan1
commentsjan1<- gsub("[^[:alnum:]///' ]", "",commentsjan1)
#for february
names(commentsfeb)
commentsfeb1=commentsfeb$CallComments
commentsfeb1
commentsfeb1<- gsub("[^[:alnum:]///' ]", "",commentsfeb1)
names(commentsmar)
commentsmar1=commentsmar$CallComments
commentsmar1
commentsmar1<- gsub("[^[:alnum:]///' ]", "",commentsmar1)
names(commentsapr)
commentsapr1=commentsapr$CallComments
commentsapr1
commentsapr1<- gsub("[^[:alnum:]///' ]", "",commentsapr1)
names(commentsmay)
commentsmay1=commentsmay$CallComments
commentsmay1
commentsmay1<- gsub("[^[:alnum:]///' ]", "",commentsmay1)
library(tm)
myCorpus <- Corpus(VectorSource(c(commentsjan1,commentsfeb1,commentsmar1,commentsapr1,commentsmay1)))
myCorpusDF<-data.frame(text=unlist(sapply(myCorpus, `[`, "content")), stringsAsFactors=F)
myCorpusDF[1:5,]
corpus_clean <- tm_map(myCorpus, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean <- tm_map(corpus_clean,stemDocument)
corpusDF<-data.frame(text=unlist(sapply(corpus_clean, `[`, "content")), stringsAsFactors=F)
View(corpusDF)
dtm <- DocumentTermMatrix(corpus_clean)
rm (commentsapr, commentsfeb, commentsjan, commentsmar, commentsmay, commentsapr1, commentsfeb1, commentsjan1, commentsmar1, commentsmay1)
dtm
rowTotals <- apply(dtm , 1, sum)
rowTotals <- apply(dtm , 1, FUN = sum, na.rm = TRUE)
dtm.reduced <- rollup(dtm, 1, na.rm=TRUE, FUN = sum)
dtm.reduced <- slam::rollup(dtm, 1, na.rm=TRUE, FUN = sum)
dtm.reduced <- slam::rollup(dtm, 2, na.rm=TRUE, FUN = sum)
dtm.reduced
inspect(dtm.reduced)
inspect(dtm.reduced[1:10,])
dtm_red <- dtm[dtm.reduced,]
dtm_red <- dtm[dtm.reduced]
dtm.reduced$i
dtm_red <- dtm[dtm.reduced$i,]
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
x <- read.csv('/Applications/MAMP/htdocs/test/data_with_date_2015-01-01_31-reducedcolumns.csv')
View(x)
y <- read.csv('http://localhost/test/GM_JOURNEY_TIME_sites.csv')
library(dplyr)
View(x)
View(y)
z <- dplyr::left_join(x, y, by=c(setNames('Site.ID', 'Site.ID')))
z <- dplyr::left_join(x, y, by = setNames(c('Site.ID', 'Site.ID')))
z <- dplyr::left_join(x, y, by = c(setNames('Site.ID', 'Site.ID')))
z <- dplyr::left_join(x, y, by = setNames('Site.ID', 'Site.ID'))
z <- dplyr::left_join(x, y, by = 'Site.ID = Site.ID')
z <- dplyr::left_join(x, y, by = setNames('Site.ID = Site.ID'))
z <- dplyr::left_join(x, y, by = setNames('Site.ID', 'Site.ID'))
rm(z)
z <- dplyr::left_join(x, y, by = c(setNames('Site.ID', 'Site.ID')))
View(z)
z <- dplyr::left_join(x, y, by = c(setNames('Site.ID', 'Site.ID'), setNames('Site.ID', 'Site.ID')))
rm(z)
z <- dplyr::left_join(x, y, by = c(setNames('Site.ID', 'Site.ID'), setNames('Site.ID', 'Site.ID')))
library(mypackage)
opencpu$stop()
library(opencpu)
opencpu$stop()
library(tidyr)
library(dplyr)
## suppose there has been a wrangle of timestamp
data_jan <- read.csv('/Applications/MAMP/htdocs/test/data_with_date_2015-01-01_31.csv')
## mutate and filter
#filter conditions: east, lane 1, and happens on mondays
data_jan_east <- data_jan %>% mutate_(.dots = c(
setNames('format(strptime(FullDate, format = \'%Y-%m-%d %H:%M:%S\'), format = \'%H\')', 'hour'),
setNames('weekdays(strptime(FullDate, format = \'%Y-%m-%d %H:%M:%S\'))', 'dayofweek')
))
data_jan_east <- data_jan_east %>% filter_(.dots =
'Direction.Name == \'East\' & Lane == \'1\' & dayofweek == \'Monday\'')
data_jan_east <- data_jan_east %>% select_(.dots = c(
'FullDate', 'hour', 'dayofweek', 'Direction.Name', 'Speed..mph.', 'Lane'))
## rename columns, in python or OpenRefine
## group by
data_jan_east <- data_jan_east %>% group_by_(.dots = c('hour', 'dayofweek'))
## see outliers in boxplot
boxplot(Speed..mph.~hour, data = data_jan_east, main="Traffic Volume Data",
xlab="Hour", ylab="Velocity")
## find stats
data_jan_east_stats <- data_jan_east %>% summarise_( .dots = c(setNames('stats::IQR(Speed..mph.)', 'IQR'),
setNames('stats::quantile(Speed..mph., 0.5)', 'median'),
setNames('stats::quantile(Speed..mph., 0.75)', 'thirdQuartile'),
setNames('stats::quantile(Speed..mph., 0.25)', 'firstQuartile')
))
data_jan_east_stats <- data_jan_east_stats %>% mutate_(.dots = c(
setNames('firstQuartile - (3 * IQR)', 'lowerOuterFence'),
setNames('thirdQuartile + (3 * IQR)', 'upperOuterFence')
))
leftJoin <- function(leftDataset,rightDataset, leftColNames, rightColNames) {
params = c()
for(i in 1:length(expressions)) {
params <- append(params, setNames(leftColNames[[i]], rightColNames[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'dayofweek'), c('hour', 'dayofweek'))
leftJoin <- function(leftDataset,rightDataset, leftColNames, rightColNames) {
params = c()
for(i in 1:length(leftColNames)) {
params <- append(params, setNames(leftColNames[[i]], rightColNames[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'dayofweek'), c('hour', 'dayofweek'))
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'Speed..mph.'), c('hour', 'dayofweek'))
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'Speed..mph.'), c('hour', 'Speed..mph.'))
data_jan_east %>% left_join(data_jan_east_stats, by= c('hour' = 'hour', 'Speed..mph.' = 'Speed..mph.'))
View(data_jan_east)
View(data_jan_east_stats)
View(data_jan_east)
View(data_jan_east_stats)
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'Speed..mph.'), c('hour', 'dayofweek'))
function (x, y, by_x, by_y)
{
.Call("dplyr_left_join_impl", PACKAGE = "dplyr", x, y, by_x,
by_y)
qqq
q
leftJoin <- function(leftDataset,rightDataset, leftColNames, rightColNames) {
params = c()
for(i in 1:length(leftColNames)) {
params <- append(params, setNames(rightColNames[[i]], leftColNames[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'Speed..mph.'), c('hour', 'dayofweek'))
library(tidyr)
library(dplyr)
## suppose there has been a wrangle of timestamp
data_jan <- read.csv('/Applications/MAMP/htdocs/test/data_with_date_2015-01-01_31.csv')
## mutate and filter
#filter conditions: east, lane 1, and happens on mondays
data_jan_east <- data_jan %>% mutate_(.dots = c(
setNames('format(strptime(FullDate, format = \'%Y-%m-%d %H:%M:%S\'), format = \'%H\')', 'hour'),
setNames('weekdays(strptime(FullDate, format = \'%Y-%m-%d %H:%M:%S\'))', 'dayofweek')
))
data_jan_east <- data_jan_east %>% filter_(.dots =
'Direction.Name == \'East\' & Lane == \'1\' & dayofweek == \'Monday\'')
data_jan_east <- data_jan_east %>% select_(.dots = c(
'FullDate', 'hour', 'dayofweek', 'Direction.Name', 'Speed..mph.', 'Lane'))
## rename columns, in python or OpenRefine
## group by
data_jan_east <- data_jan_east %>% group_by_(.dots = c('hour', 'dayofweek'))
## see outliers in boxplot
boxplot(Speed..mph.~hour, data = data_jan_east, main="Traffic Volume Data",
xlab="Hour", ylab="Velocity")
## find stats
data_jan_east_stats <- data_jan_east %>% summarise_( .dots = c(setNames('stats::IQR(Speed..mph.)', 'IQR'),
setNames('stats::quantile(Speed..mph., 0.5)', 'median'),
setNames('stats::quantile(Speed..mph., 0.75)', 'thirdQuartile'),
setNames('stats::quantile(Speed..mph., 0.25)', 'firstQuartile')
))
data_jan_east_stats <- data_jan_east_stats %>% mutate_(.dots = c(
setNames('firstQuartile - (3 * IQR)', 'lowerOuterFence'),
setNames('thirdQuartile + (3 * IQR)', 'upperOuterFence')
))
leftJoin <- function(leftDataset,rightDataset, leftColNames, rightColNames) {
params = c()
for(i in 1:length(leftColNames)) {
params <- append(params, setNames(rightColNames[[i]], leftColNames[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'Speed..mph.'), c('hour', 'dayofweek'))
leftJoin(data_jan_east, data_jan_east_stats, c('hour', 'dayofweek'), c('hour', 'dayofweek'))
library(mypackage)
library(opencpu)
opencpu::stop()
opencpu$stop()
opencpu$start(port = 12345)
library(mypackage)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
leftJoin <- function(leftDataset, rightDataset, leftColName, rightColName) {
params = c()
for(i in 1:length(expressions)) {
params <- append(params, setNames(rightColName[[i]], leftColName[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
data_jan <- read.csv('/Applications/MAMP/htdocs/test/data_with_date_2015-01-01_31.csv')
dplyr::distinct(data_jan %>% Site.ID)
library(dplyr)
dplyr::distinct(data_jan %>% Site.ID)
data_jan %>% select(Site.ID) %>% distinct()
sites <- data_jan %>% select(Site.ID) %>% distinct()
leftJoin(data_jan, sites, c('Site.ID'), c('Site.ID'))
leftJoin <- function(leftDataset, rightDataset, leftColName, rightColName) {
params = c()
for(i in 1:length(leftColName)) {
params <- append(params, setNames(rightColName[[i]], leftColName[[i]]))
}
result <- dplyr::left_join(leftDataset, rightDataset, by=params)
return(result)
}
leftJoin(data_jan, sites, c('Site.ID'), c('Site.ID'))
data_jan <- dplyr::top_n(1000)
leftJoin(data_jan, sites, c('Site.ID'), c('Site.ID'))
data_jan <- dplyr::top_n(1000)
sites <- data_jan %>% select(Site.ID) %>% distinct()
leftJoin(data_jan, sites, c('Site.ID'), c('Site.ID'))
x<- leftJoin(data_jan, sites, c('Site.ID'), c('Site.ID'))
View(x)
data_jan <- dplyr::top_n(1000)
View(x)
library(mypackage)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
opencpu$start(12345)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
opencpu$start(12345)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
opencpu$start(12345)
install.packages("RAppArmor")
install.packages("libapparmor-dev")
csv.read('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv')
read.csv('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv')
read.csv(file('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv'))
read.csv('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv')
install.packages("RCurl")
opencpu$stop()
opencpu$start(12345)
read.csv('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv')
x<-read.csv('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv')
View(x)
x <- read.csv(file = url('http://localhost:12345/ocpu/tmp/x0aa38fc423/R/.val/csv'))
View(x)
fread()
library(mypackage)
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
library(opencpu)
opencpu$stop()
opencpu$start(12345)
opencpu$stop()
